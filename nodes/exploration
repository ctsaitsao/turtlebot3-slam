#!/usr/bin/env python

"""
Node causes turtlebot3 to explore a space autonomously, in conjunction with
slam_toolbox.

ACTIONS:
    move_base (move_base_msgs/MoveBase): plans and navigates robot to goal.
"""

import rospy
import actionlib
import tf2_ros
import numpy as np
import sys
import random
import math
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import Transform, TransformStamped, Vector3, Quaternion

np.set_printoptions(threshold=sys.maxsize)  # for debugging


class Exploration:
    """ Autonomous exploration to map an environment. """
    def __init__(self):
        self.__move_base_client = actionlib.SimpleActionClient('move_base',
                                                               MoveBaseAction)
        self.__move_base_client.wait_for_server()
        self.__tf_broadcaster = tf2_ros.TransformBroadcaster()
        self.__tf_buffer = tf2_ros.Buffer()
        self.__tf_listener = tf2_ros.TransformListener(self.__tf_buffer)

    def image_gradient(self, I, operator='Sobel'):
        """ Outputs an image's gradient based on one of three operators.

            Args:
               I (np.ndarray): input image
               operator (str): type of kernel to convolve image with
        """
        mag = np.zeros((I.shape[0], I.shape[1]))
        theta = np.zeros((I.shape[0], I.shape[1]))

        allowable_operators = ['Sobel', 'Roberts_Cross', 'Prewitt']
        if operator not in allowable_operators:
            raise ValueError(f'operator must be in {allowable_operators}')

        if operator == 'Sobel':
            Gx = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
            Gy = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
        elif operator == 'Roberts_Cross':
            Gx = np.array([[1, 0], [0, -1]])
            Gy = np.array([[0, -1], [1, 0]])
        else:
            Gx = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])
            Gy = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])

        for i in range(1, I.shape[0] - 2):
            for j in range(1, I.shape[1] - 2):
                if operator == 'Sobel' or operator == 'Prewitt':
                    sub_img = I[i - 1:i + 2, j - 1:j + 2]
                elif operator == 'Roberts_Cross':
                    sub_img = I[i - 1:i + 1, j - 1:j + 1]
                Ix = np.sum(Gx * sub_img)
                Iy = np.sum(Gy * sub_img)
                mag[i, j] = math.sqrt(Ix**2 + Iy**2)
                theta[i, j] = math.atan2(Iy, Ix)

        return mag, theta

    def explore(self):
        """ Autonomous exploration. Sends pose goals to move_base. """
        while True:

            # Map data:
            map_data = rospy.wait_for_message('/map', OccupancyGrid)
            map_1d = map_data.data
            map_width = map_data.info.width
            map_height = map_data.info.height
            map_resolution = map_data.info.resolution
            map_origin = map_data.info.origin

            # Transforming row-major 1d list into 2d np.ndarray:
            map_2d = np.zeros((map_height, map_width))

            for y in range(map_height):
                for x in range(map_width):
                    map_2d[map_height - y - 1, x] = \
                        map_1d[x + map_width * y]

            # Transform from map frame to lower left corner of map data:
            Tml = Transform(
                    translation=Vector3(
                        x=map_origin.position.x,
                        y=map_origin.position.y,
                        z=0),
                    rotation=Quaternion(
                        x=0,
                        y=0,
                        z=0,
                        w=1
                    ))
            Tml_stamped = TransformStamped()
            Tml_stamped.header.stamp = rospy.Time.now()
            Tml_stamped.header.frame_id = "map"
            Tml_stamped.child_frame_id = "lower_left_corner"
            Tml_stamped.transform = Tml

            self.__tf_broadcaster.sendTransform(Tml_stamped)

            # Replace unknown values of -1 with 100 and occupied values of 100
            # with 50, to only select high gradients from unknown to occupied:
            map_2d_ = np.where(map_2d == 100, 50, map_2d)
            map_2d_ = np.where(map_2d_ == -1, 100, map_2d_)

            # Image gradient:
            laplacian, _ = self.image_gradient(map_2d_,
                                               operator='Roberts_Cross')
            laplacian *= 255 / np.amax(laplacian)

            # Global costmap data:
            global_costmap = rospy.wait_for_message(
                '/move_base/global_costmap/costmap', OccupancyGrid)
            global_1d = global_costmap.data
            global_width = global_costmap.info.width
            global_height = global_costmap.info.height

            # Transforming row-major 1d list into 2d np.ndarray:
            global_2d = np.zeros((global_height, global_width))

            for y in range(global_height):
                for x in range(global_width):
                    global_2d[global_height - y - 1, x] = \
                        global_1d[x + global_width * y]

            # Finding poses with high gradient (which shows that there's an
            # edge between unexplored and unoccupied) and relatively low
            # global costmap (to avoid walls and obstables):
            possible_poses = []

            for y in range(laplacian.shape[0]):
                for x in range(laplacian.shape[1]):
                    if laplacian[y, x] > 150 and global_2d[y, x] < 50:
                        possible_poses.append((x, map_height - y))

            map_x, map_y = random.choice(possible_poses)

            # Transform from lower_left_corner frame to goal pose:
            Tlg = Transform(
                    translation=Vector3(
                        x=map_x * map_resolution,
                        y=map_y * map_resolution,
                        z=0),
                    rotation=Quaternion(
                        x=0,
                        y=0,
                        z=0,
                        w=1
                    ))
            Tlg_stamped = TransformStamped()
            Tlg_stamped.header.stamp = rospy.Time.now()
            Tlg_stamped.header.frame_id = "lower_left_corner"
            Tlg_stamped.child_frame_id = "goal"
            Tlg_stamped.transform = Tlg

            self.__tf_broadcaster.sendTransform(Tlg_stamped)

            # tf gives us transform from map to face to goal pose:
            try:
                Tmg = self.__tf_buffer.lookup_transform('map',
                                                        'goal',
                                                        rospy.Time())
            except (tf2_ros.LookupException,
                    tf2_ros.ConnectivityException,
                    tf2_ros.ExtrapolationException):
                continue

            goal = MoveBaseGoal()
            goal.target_pose.header.frame_id = "map"  # has to be in map frame
            goal.target_pose.header.stamp = rospy.Time.now()
            goal.target_pose.pose.position.x = Tmg.transform.translation.x
            goal.target_pose.pose.position.y = Tmg.transform.translation.y
            goal.target_pose.pose.orientation.w = 1.0

            self.__move_base_client.send_goal(goal)

            wait = self.__move_base_client.wait_for_result()
            if not wait:
                rospy.logerr("Action server not available!")
                rospy.signal_shutdown("Action server not available!")


def main():
    """ The main() function. """
    rospy.init_node('exploration')
    exploration = Exploration()
    exploration.explore()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
